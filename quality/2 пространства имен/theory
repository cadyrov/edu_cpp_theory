Зови меня по имени
Имя — это идентификатор. Оно:
состоит из латинских букв: больших и маленьких, цифр и знака подчеркивания;
не может начинаться с цифры;
может состоять даже из одного символа, например, знака подчеркивания: _ — допустимое имя для сущности в C++.
Имена людей в реальной жизни могут совпадать. Имена разных сущностей кода тоже. Но они не должны совпадать с ключевыми словами, набор которых в C++ жёстко ограничен. Если в одной программе встретились одинаковые имена, они конкурируют между собой. Компилятор по строгим правилам будет определять, какую сущность имел в виду программист, когда написал имя, принадлежащее нескольким сущностям. Если выбрать не удалось, компилятор выдаст ошибку.
Некоторые сущности кода, которые обычно имеют имя, могут вдруг оказаться безымянными. Бывает, что хозяева не дали имя своей собачке, и её зовут просто Собака. Но в C++ назвать структуру словом struct нельзя, потому что это слово ключевое. Поэтому она будет безымянной. Всё, что вы можете сделать с такой структурой, — это сразу объявить переменную такого типа:
int main() {
    // Объявляем переменную point. 
    // Её тип - безымянная структура с полями x и y типа int.
    struct {
        int x;
        int y;
    } point;
    point.x = 5;
    point.y = 10;
}
Помимо структуры и класса, безымянным может быть параметр функции или шаблона, если они не используются, но должны быть указаны. Вспомните, например, самый плохой в мире хешер, который всегда выдаёт 42, вне зависимости от значения своего параметра:
struct DummyHasher { 
    size_t operator() (const std::string& s) const {
        return 42;
    }
};
Параметр s не используется, о чём может предупредить компилятор:
In member function 'size_t DummyHasher::operator()(const string&) const':
prog.cc:6:43: warning: unused parameter 's' [-Wunused-parameter]
    6 |     size_t operator() (const std::string& s) const {
      |                        ~~~~~~~~~~~~~~~~~~~^
Объявив параметр операции () безымянным, можно устранить это предупреждение:
struct DummyHasher { 
    size_t operator() (const std::string&) const {
        return 42;
    }
};
Другой способ указать, что параметр может быть неиспользуемым — пометить его атрибутом [[maybe_unused]]:
struct DummyHasher { 
    size_t operator() ([[maybe_unused]] const std::string& s) const {
        // Теперь компилятор не будет предупреждать о том, что s не используется
        return 42;
    }
};
Разрешается не писать имена параметров и при объявлении функции. А вот переменные и сами функции безымянными быть не могут.
В некоторых случаях имя может быть составным — разбиваться на лексемы. Так бывает с операциями. Операция — это обычная функция, имя которой состоит из ключевого слова operator и знака операции, например, operator+. Еще один пример составного имени — имя деструктора класса, которое содержит знак ~.
В случае сомнений можете свериться со списком ключевых слов на сайте cppreference.com.

В заданиях говорится о компьютерных языках JSON и XML, которые задают форматы структурирования данных. Для вас подготовлены простые библиотеки для чтения этих форматов. Ваша задача — самостоятельно в них разобраться и научиться использовать.
Пространства имён спешат на помощь
В C++ разные сущности кода могут иметь одинаковые имена. В некоторых случаях это не создаёт проблем:
#include <iostream>
using namespace std;

int x() {
    int x = 42;
    return x;
}

int main() {
    int y = x();
    {
        int x = y;
        {
            int x = 100500;
            cout << x << endl;
        }
        cout << x << endl;
    }
}
Программа два раза подряд выводит x, но выдаёт разные числа:
100500
42
Сколько разных сущностей кода этой программы имеют имя x?
функция x,
переменная в функции x,
переменная в функции main, которой мы присвоили значение y,
переменная в функции main, которой мы присвоили 100500.

Когда сущности с одинаковым именем начинают конкурировать друг с другом, компилятор выбирает ту из них, которая находится в наиболее близкой объемлющей области видимости. Если же несколько имён расположены одинаково по отношению к месту использования, неизбежно возникает конфликт: компилятор не сможет выбрать между ними. Подбрасывать монетку, чтобы выбрать победителя, компилятор не станет. Вместо этого он покажет вам ошибку и откажется собирать программу.
Вспомним две задачи, которые вы решали перед этим уроком. В одной использовали библиотеку для работы с JSON, а в другой — для работы с XML. Теперь попробуем сделать универсальную программу, которая бы поддерживала оба формата. Здесь нас поджидают проблемы. Подключив json.h и xml.h в main.cpp, получим целую плеяду ошибок:
xml.h:11:7: error: redefinition of 'class Node'
 class Node {
       ^~~~
In file included from main.cpp:7:
json.h:10:7: note: previous definition of 'class Node'
 class Node {
       ^~~~
In file included from main.cpp:8:
xml.h:28:7: error: redefinition of 'class Document'
 class Document {
       ^~~~~~~~
In file included from main.cpp:7:
json.h:29:7: note: previous definition of 'class Document'
 class Document {
       ^~~~~~~~
In file included from main.cpp:8:
xml.h:44:10: error: no declaration matches 'T Node::AttributeValue(const string&) const'
 inline T Node::AttributeValue(const string& name) const {
          ^~~~
xml.h:44:10: note: no functions named 'T Node::AttributeValue(const string&) const'
In file included from main.cpp:7:
json.h:10:7: note: 'class Node' defined here
 class Node {
Ошибка redefinition of class сообщает о том, что класс с таким именем был определен ранее. Иначе говоря, о конфликте имен. Компилятор указал два места, где определяются классы с именем Node, и с ним не поспоришь.
Выходит, в библиотеках JSON и XML есть серьёзный просчёт — они используют простые названия для классов и функций: Node, Document, Load. Эти имена в двух библиотеках конфликтуют. Использовать их одновременно нельзя, более того, такие простые названия могут конфликтовать и с другими частями большой программы.
Добавление к именам префикса часто используется, особенно в библиотеках, которые могут быть доступны на чистом C.
Но мы поступим иначе и вместо добавления префикса к каждому имени используем такую возможность C++ как пространства имён. Чтобы это сделать, нужно все определения и объявления в cpp и h-файлах заключить в конструкцию namespace имя {...}:
//файл json.h
#pragma once
// #include ...
// начинаем пространство имён
namespace json {
// В соответствии с принятым в Практикуме стилем оформления кода
// содержимое внутри namespace {...} пишется без отступов.
class Node {
    // ...
};
class Document {
    // ...
};
Document Load(std::istream& input);

// нужно закрыть namespace
}
Так будет выглядеть файл json.cpp:
#include "json.h"
using namespace std;
// начинаем пространство имен
namespace json {
Node::Node(vector<Node> array) : as_array(move(array)) {
}
// определения других конструкторов и методов класса Node
Node LoadNode(istream& input);
Node LoadArray(istream& input) {
    // ...
}
// определения других вспомогательных функций
Document Load(istream& input) {
    // ...
}
// нужно закрыть namespace
}
Аналогично поступим с библиотекой XML: обернем все объявления и определения в этих файлах в namespace xml.
Теперь включение обоих заголовочных файлов в main.cpp не вызовет ошибок. Эта операция оказалась проще добавления префикса JSON или XML ко всем именам библиотек — не пришлось редактировать каждое имя. Но вне пространства имён, например в файле main.cpp, имя Document стало недоступно. Нужно сообщить компилятору, документ из какого пространства имён мы имеем в виду, добавив перед именем квалификацию — явное указание на то, в каком пространстве имен его искать.
Вот как можно дать квалификацию:
vector<Spending> LoadFromXml(istream& input) {
    xml::Document doc = xml::Load(input);
    vector<Spending> result;
    for (const xml::Node& node : doc.GetRoot().Children()) {
        result.push_back({node.AttributeValue<string>("category"s), node.AttributeValue<int>("amount"s)});
    }
    return result;
}

vector<Spending> LoadFromJson(istream& input) {
    json::Document doc = json::Load(input);
    vector<Spending> result;
    for (const json::Node& node : doc.GetRoot().AsArray()) {
        result.push_back({node.AsMap().at("category"s).AsString(), node.AsMap().at("amount"s).AsInt()});
    }
    return result;
}
К именам библиотеки JSON добавлен префикс json:: и префикс xml:: для имён XML. Такой способ имеет минимум два преимущества перед явным приписыванием префиксов ко всем именам файла:
имя с квалификацией json::Document выглядит структурировано и его проще читать, чем JSONDocument;
внутри библиотеки нет необходимости каждый раз писать префикс.
Квалификация имени похожа на написание адреса. Если хотите попросить кого-нибудь сходить в ближайший магазин, можете просто сказать «сходи в магазин N». Если имеется в виду определенный магазин вашего города, нужно дать квалификацию, то есть название улицы: «магазин N на улице Бассейной». Если же магазин находится в другом городе или даже другой стране, квалификация будет больше, например «магазин N на Марион-стрит, Сиэтл, США». В C++ этому соответствует использование нескольких вложенных пространств имен, например std::chrono::steady_clock.
В следующем уроке подробнее разберем синтаксис пространств имён.
Синтаксис пространств имен
Пространства имён помогли избежать конфликта и использовать две похожие библиотеки в одной программе. В этом уроке разберем все тонкости их использования.
Создание и расширение пространств имён
У пространств имён есть особенность, отличающая их от других сущностей C++: одно и то же пространство имён может определяться сколько угодно раз в разных частях программы. Так, в прошлом уроке мы писали namespace xml в файле xml.h и namespace xml в файле xml.cpp, но конфликта при этом не возникло. Можно добавить ещё одно имя в это пространство, написав в main.cpp такой код:
...

namespace xml {

Document LoadSpendings(istream& in) {
    // ...
}

}
Это синтаксически верно, но делать так не рекомендуется — пространство имён xml — прерогатива библиотеки XML, а не использующего её приложения. Если вы в своём приложении добавите класс или функцию в пространство имён xml, то при обновлении библиотеки рискуете столкнуться с конфликтом имён.
Вложенные пространства имен
Пространства имён могут быть вложены друг в друга. Например, принято выделять вспомогательные функции и классы библиотеки во вложенное пространство имен detail. Его можно использовать так:
// файл json.cpp
#include "json.h"
using namespace std;
namespace json {
...
// вложенное пространство имен
// его имя с квалификацией json::detail
namespace detail {
Node LoadNode(istream& input);
Node LoadArray(istream& input) {
    ...
}
Node LoadInt(istream& input) {
    ...
}
Node LoadString(istream& input) {
    ...
}
Node LoadDict(istream& input) {
    ...
}
Node LoadNode(istream& input) {
    ...
}
// завершаем пространство имён json::detail
}
Document Load(istream& input) {
        return Document{detail::LoadNode(input)};
}
// завершаем пространство имён json
}
В пространстве имён detail обычно размещают сущности, которые предназначены для внутреннего использования. Эти детали реализации могут изменяться от версии к версии, в то время как сама библиотека будет иметь стабильный программный интерфейс. В коде, использующем библиотеку, не рекомендуется ссылаться на сущности из detail, чтобы после обновления библиотеки не столкнуться с ошибками.
Какое будет полное квалифицированное имя у функции g из следующего примера?
namespace A {
namespace B {
void f();
}

namespace C {
namespace D {
void g();
}
}

}
Посмотрите внимательно, в какие пространства имён попадает g.
Правильный ответ A::C::D::g. 
Определения методов и функций
Функции и методы, объявленные внутри пространства имен, можно определять двумя способами:
внутри конструкции namespace,
вне конструкции namespace, явно указывая квалификацию каждого имени.
Когда применяется первый способ, определение целиком помещается в конструкцию namespace и квалифицировать имена того же пространства не нужно: при поиске сущности по имени компилятор обязательно будет принимать во внимание все видимые имена этого пространства.
Второй способ позволяет определить объявленную внутри конструкции namespace функцию или метод, не прибегая к этой конструкции второй раз.
Вот как определяется функция Load во втором случае:
json::Document json::Load(istream& input) {
    return Document{LoadNode(input)};
}
Пришлось квалифицировать не только имя функции, но и тип возвращаемого значения. Внутри реализации имена квалифицировать не обязательно, так как тело функции уже относится к ее пространству имен. Также необязательно квалифицировать имена в списке параметров.
В отличие от определений, объявления функций и классов можно делать только первым способом — внутри конструкции namespace.
Изучение синтаксиса пространств имён на этом завершается. Чтобы закрепить тему, ответьте на вопрос и решите задачу.
Посмотрите на пример кода:
// buildings.h
#include <vector>
namespace buildings {
struct Materials {};
Materials GetMaterials();
class Skyscraper {
    struct Floor {
        /* 1 */ buildings::Materials materials;
        int number;
    };

    Floor BuildFloor(/* 2 */ buildings::Materials materials);
    void BuildRoof(buildings::Materials materials);
    int GetMaterials(buildings::Materials source);

    bool IsComplete() const {
        return static_cast<int>(floors_.size()) < total_floors_;
    }

public:
    void Build() {
        while (!IsComplete()) {
            auto materials = /* 3 */ buildings::GetMaterials();
            floors_.push_back(BuildFloor(std::move(materials)));
        }
    }

private:
    int total_floors_ = 100;
    std::vector<Floor> floors_;
    /* 4 */ buildings::Materials roof_;
};
}  // namespace buildings
// buildings.cpp
#include "buildings.h"
using namespace std;
/* 5 */ buildings::Skyscraper::Floor /* 6 */ buildings::Skyscraper::BuildFloor(/* 7 */ buildings::Materials materials) {
    /* 8 */ buildings::Materials materials_copy = move(materials);
    return Floor{move(materials_copy), static_cast<int>(floors_.size())};
}
namespace buildings {
void /* 9 */ buildings::Skyscraper::BuildRoof(/* 10 */ buildings::Materials materials) {
    /* 11 */ buildings::Materials materials_copy = move(materials);
    roof_ = move(materials_copy);
}
}  // namespace buildings
Сокращаем с using
Разберём способы избежать квалификации. С одним из таких способов вы хорошо знакомы с первых уроков: using namespace std. Он позволяет убрать квалификацию у имён стандартной библиотеки и вместо std::map<std::string, std::pair<std::string, std::optional<std::string_view>>> написать map<string, pair<string, optional<string_view>>>. Это тоже не выглядит просто, но всё-таки короче и легче читается.

Представьте себе такой диалог:
— Как дела у Пети Иванова?
— О, у него дела отлично!
— У Пети Иванова что-то новое?
— Да, Петя Иванов защитил диссертацию и уехал за границу.
— А в какую страну Петя Иванов уехал?
— В Голландию!
Есть в этом диалоге что-то странное и неестественное — Петю всё время называют по имени и фамилии. В реальной жизни так говорить не будут — фамилию назовут только в первый раз, если это необходимо, а дальше будут говорить просто «Петя», поскольку уже понятно, что имеется в виду именно Петя Иванов, а не Петров и не Сидоров. Если убрать фамилию в третьей и последующих строках, диалог станет вполне естественным.
Но в C++ вне пространства имён приходится использовать полное квалифицированное имя. Так произошло, например, в следующем юнит-тесте для библиотеки INI:
void TestDocument() {
    ini::Document doc;
    assert(doc.SectionCount() == 0u);

    ini::Section* section = &doc.AddSection("one"s);
    assert(doc.SectionCount() == 1u);

    section->insert({"name_1"s, "value_1"s});
    section->insert({"name_2"s, "value_2"s});

    section = &doc.AddSection("two"s);
    section->insert({"name_1"s, "value_1"s});
    section->insert({"name_2"s, "value_2"s});
    section->insert({"name_3"s, "value_3"s});

    section = &doc.AddSection("three"s);
    section->insert({"name_1"s, "value_1"s});

    assert(doc.SectionCount() == 3u);
    const ini::Section expected_one = {{"name_1"s, "value_1"s}, {"name_2"s, "value_2"s}};
    const ini::Section expected_two = {{"name_1"s, "value_1"s}, {"name_2"s, "value_2"s}, {"name_3"s, "value_3"s}};
    const ini::Section expected_three = {{"name_1"s, "value_1"s}};

    assert(doc.GetSection("one"s) == expected_one);
    assert(doc.GetSection("two"s) == expected_two);
    assert(doc.GetSection("three"s) == expected_three);
}
Обратите внимание, что квалифицировать имя Section пришлось несколько раз. При чтении кода было бы понятно и так, что работа производится с сущностями именно этой библиотеки, но компилятор требует квалификацию. Сейчас пространство имён короткое — его название состоит всего из трёх букв. А в реальных программах оно может достигать 20 и более символов. В таких случаях частое использование квалификации затрудняло бы чтение кода.
Чтобы сократить написание и упростить чтение, можно применить декларацию using:
using ini::Section;
Она добавит имя в область видимости, после чего Section можно будет использовать без квалификации. Код стал немного проще:
void TestDocument() {
    ini::Document doc;
    assert(doc.SectionCount() == 0u);

    using ini::Section;
    Section* section = &doc.AddSection("one"s);
    assert(doc.SectionCount() == 1u);

    section->insert({"name_1"s, "value_1"s});
    section->insert({"name_2"s, "value_2"s});

    section = &doc.AddSection("two"s);
    section->insert({"name_1"s, "value_1"s});
    section->insert({"name_2"s, "value_2"s});
    section->insert({"name_3"s, "value_3"s});

    section = &doc.AddSection("three"s);
    section->insert({"name_1"s, "value_1"s});

    assert(doc.SectionCount() == 3u);
    const Section expected_one = {{"name_1"s, "value_1"s}, {"name_2"s, "value_2"s}};
    const Section expected_two = {{"name_1"s, "value_1"s}, {"name_2"s, "value_2"s}, {"name_3"s, "value_3"s}};
    const Section expected_three = {{"name_1"s, "value_1"s}};

    assert(doc.GetSection("one"s) == expected_one);
    assert(doc.GetSection("two"s) == expected_two);
    assert(doc.GetSection("three"s) == expected_three);
}
Нам удалось убрать четыре квалификации. Посчитаем, на сколько символов сократился код. 20 символов мы сэкономили, убрав ini:: перед именем Section, но 19 пришлось потратить на саму конструкцию using ini::Section;. Итого — выигрыш всего в один символ.
Как видно, экономия небольшая, но код стало проще воспринимать. Похожая ситуация была в диалоге о Пете из начала урока. А читаемость кода — это гораздо более важный параметр, чем количество символов в нём.

Такая using-декларация распространяется только на то имя, которое указано в ней явно, и только на ту область видимости, где она объявлена. using можно написать и вне областей видимости, например в начале файла. Тогда имя станет глобальным — будет распространяться на весь файл. Это соответствует ситуации, когда человек недавно чего-нибудь достиг, и о нём все говорят. Использовать его имя можно, не уточняя, кому именно оно принадлежит.
Теперь представьте, что обсуждают членов одной семьи. Их называют по имени и фамилии. Довольно бессмысленное занятие — ведь фамилия у всех одинаковая. Так никто не делает. В C++ подобное возникает, когда вне пространства имён вам нужно использовать самые разные имена этого пространства.
Например, в другом юнит-тесте библиотеки используется три разных имени из ini:
void TestLoadIni() {
    istringstream input(
        R"([july]
food=2500
sport=12000
travel=23400
clothes=5200
[august]
food=3250
sport=10000
travel=0
clothes=8300
jewelery=25000
)"s);

    const ini::Document doc = ini::Load(input);

    assert(doc.SectionCount() == 2u);

    const ini::Section expected_july = {
        {"food"s, "2500"s},
        {"sport"s, "12000"s},
        {"travel"s, "23400"s},
        {"clothes"s, "5200"s},
    };

    const ini::Section expected_august = {
        {"food"s, "3250"s}, {"sport"s, "10000"s}, {"travel"s, "0"s}, {"clothes"s, "8300"s}, {"jewelery"s, "25000"s},
    };

    assert(doc.GetSection("july"s) == expected_july);
    assert(doc.GetSection("august"s) == expected_august);
}
Здесь имеет смысл использовать директиву using namespace, которая сделает доступными все имена выбранного пространства имён. В области видимости, где эта декларация есть, можно использовать имена выбранного пространства имён без квалификации:
void TestLoadIni() {
    istringstream input(
        R"([july]
food=2500
sport=12000
travel=23400
clothes=5200
[august]
food=3250
sport=10000
travel=0
clothes=8300
jewelery=25000
)"s);

    using namespace ini;

    const Document doc = Load(input);

    assert(doc.SectionCount() == 2u);

    const Section expected_july = {
        {"food"s, "2500"s},
        {"sport"s, "12000"s},
        {"travel"s, "23400"s},
        {"clothes"s, "5200"s},
    };

    const Section expected_august = {
        {"food"s, "3250"s}, {"sport"s, "10000"s}, {"travel"s, "0"s}, {"clothes"s, "8300"s}, {"jewelery"s, "25000"s},
    };

    assert(doc.GetSection("july"s) == expected_july);
    assert(doc.GetSection("august"s) == expected_august);
}
Код сократился, и читать его стало проще. Есть соблазн поставить директиву using namespace прямо в начало файла, как мы делаем это иногда с using namespace std:
...
#include "json.h"
#include "xml.h"

using namespace json;
using namespace xml;
Компилируем программу и видим ошибку — error: reference to 'Document' is ambiguous.
Эти конструкции using namespace отменили все преимущества, которые дал сам namespace, сделав фактически обратное действие. Мы вернулись к разбитому корыту — ситуации, когда у нас не было пространств имен, но мы всё равно хотели использовать JSON и XML одновременно. Однако между двумя этими случаями есть разница: в первом ошибка возникла сразу при попытке включения двух файлов, а во втором — только при использовании имени. Это делает ошибку более опасной, поскольку она выявляется не сразу.
Всё это диктует важное правило: использовать директиву using namespace нужно только в том месте, где она действительно необходима, максимально сужая область ее действия.
Особенно неприятно, когда конструкция using namespace встречается в h-файле, причём её действие не ограничено областью видимости. В этом случае она будет распространяться на все файлы, которые используют этот заголовочный файл. Пользователи h-файла могут совсем не ожидать, что он будет делать видимыми имена какого-либо пространства имён, и это приведёт к конфликтам. Поэтому делать так ни в коем случае не нужно.
У декларации using namespace есть ещё один эффект. Если написать using namespace my_beautiful_namespace внутри другого пространства имён, оно примет все имена пространства my_beautiful_namespace:
#include <iostream>

namespace verbs {
void Clap() {
    std::cout << "Хлоп!" << std::endl;
}
}  // namespace verbs

namespace words {
using namespace verbs;
}

int main() {
    // обращаемся к функции verbs::Clap через пространство words
    words::Clap();
}
У декларации using и директивы using namespace есть некоторые различия, выходящие за рамки курса. О них можно почитать в документации. Они касаются поведения при конфликте имен. Можно считать, что using работает чётко — помещает имя в текущую область видимости, и это имя будет всегда иметь приоритет при конфликтах над именами, расположенными в объемлющих областях. С using namespace так не происходит — приоритет при конфликтах эта конструкция дает не всегда.
Глобальное пространство имён и std
До подробного изучения пространств имён мы добрались только в этой теме. Но некоторые пространства вы постоянно использовали и раньше. С одним из них вы знакомы с первых шагов в C++ — с момента, когда вы написали строку using namespace std;. Это пространство стандартной библиотеки std. Другое объемлет всё, что есть в вашей программе. Оно называется глобальным. Разберём эти пространства имён.
Пространство имён std
Сказать, что пространство std содержит всё, что есть в стандартной библиотеке, будет преувеличением, потому что некоторые вещи вынужденно в него не входят и доступны глобально.
В std находятся многие имена, с которыми вы имели дело. Например:
контейнеры — std::vector, std::map, std::list, std::set, std::string;
алгоритмы — std::find, std::find_if, std::upper_bound, std::reverse, std::max;
потоки и манипуляторы — std::cin, std::cout, std::endl;
математические функции — std::log, std::sin, std::atan;
многопоточность — std::mutex, std::lock_guard, std::future;
вспомогательные функции — std::move, std::exchange, std::swap.
Некоторые имена стандартной библиотеки могут стать доступны в глобальном пространстве имён, то есть без префикса std::. Так исторически сложилось. Какие конкретно имена будут видны без префикса, стандартом не регламентировано и зависит от используемой вами стандартной библиотеки.
Из-за этого при разработке поисковой системы вы могли столкнуться со следующей проблемой. Взгляните на программу, которая сортирует документы по убыванию рейтинга и релевантности:
#include <algorithm>
#include <cstdlib>
#include <iostream>
#include <vector>

struct Document {
    int id = 0;
    double relevance = 0.0;
    int rating = 0;
};

// Сортирует документы по релевантности и рейтингу
void SortDocuments(std::vector<Document>& docs) {
    std::sort(docs.begin(), docs.end(), 
        [](const Document& lhs, const Document& rhs){
            if (abs(lhs.relevance - rhs.relevance) < 1e-6) {
                // релевантности примерно равны, упорядочиваем документы по рейтингу
                return lhs.rating > rhs.rating;
            } else {
                return lhs.relevance > rhs.relevance;
            }
        });
}

int main() {
    std::vector<Document> docs{ {1, 0.3, 3}, {2, 0.2, 5} };
    SortDocuments(docs);
    for (const auto& doc : docs) {
        std::cout << doc.id << ',';
    }
}

На первый взгляд кажется, что программа должна вывести сначала документ с id=1 и релевантностью 0,3, а потом документ с id=2 релевантностью 0,2. Если программу скомпилировать, используя Visual C++, так и произойдёт. А с компилятором gcc программа выведет документы в противоположном порядке. Дело в том, что в gcc в заголовочных файлах стандартной библиотеки функция abs объявлена примерно так:
// Версии функции abs в глобальном пространстве имён называются по-разному,
// так же, как это реализовано в C
int abs(int);
float fabsf(float);
double fabs(double);

namespace std {
// C++ поддерживает перегрузку функций, поэтому внутри namespace std
// есть функции с одинаковым именем, но разными типами аргументов

float fabsf(float);
float fabs(float);
double fabs(double);

int abs(int x);
float abs(float x);
double abs(double);

}  // namespace std
В gcc глобальное пространство имён содержит только одну функцию abs, которая принимает и возвращает int. Теперь взглянем ещё раз на сортировку документов:
std::sort(docs.begin(), docs.end(), 
    [](const Document& lhs, const Document& rhs) {
        if (abs(lhs.relevance - rhs.relevance) < 1e-6) {
            // релевантность примерно равна, упорядочиваем документы по рейтину
            return lhs.rating > rhs.rating;
        } else {
            return lhs.relevance > rhs.relevance;
        }
    });
В программе отсутствует директива using namespace std;. Поэтому по короткому имени abs компилятор gcc находит только функцию, принимающую int. Разность релевантностей документов, равная 0.1 или -0.1, преобразуется из double в int и становится равной нулю. В результате abs возвращает 0, и компаратор сравнивает рейтинг документов. Документ с меньшей релевантностью, но более высоким рейтингом поднимается наверх.
Visual C++ в стандартной библиотеке в глобальном пространстве имён объявляет функции abs, принимающие как целые числа, так и числа с плавающей запятой:
namespace std {
    // Здесь то же, что и в gcc
} 

float fabsf(float);
float fabs(float);
double fabs(double);

int abs(int);
inline float abs(float x) { return fabsf(x); }
inline double abs(double x) { return fabs(x); }
Чтобы программа везде работала одинаково, нужно в компараторе вызвать std::abs явно, либо использовать using namespace std. Во втором случае перегруженные версии std::abs станут видны в глобальном пространстве имён, и gcc между abs(int) и std::abs(double) выберет std::abs(double) как более подходящий под аргумент double.
namespace std {
int abs(int);
float abs(float);
double abs(double);
float fabs(float);
double fabsl(double);
}  // namespace std

// В языке C нет перегрузки функций, поэтому версии функции abs, 
// работающие с разными типами, имеют разные имена
int abs(int);
float fabs(float);
double fabsl(double);
В теме о многофайловых проектах мы договорились не писать using namespace std в h-файлах. Писать его в cpp-файлах или нет — дело вкуса. Нужно понимать, что при использовании using namespace std могут возникать конфликты между именами стандартной библиотеки и именами вашей программы. Кроме того, стандартная библиотека расширяется с принятием нового стандарта, что происходит примерно раз в 3 года. Это может добавить новые имена, которые вы не учитывали при написании своей программы.
В задачах и проектах курса вы можете смело использовать using namespace std в cpp-файлах. Здесь принят стиль, согласно которому функции и классы называются с большой буквы, а значит, с именами std они конфликтовать не будут.
Глобальное пространство имён
Ещё одно пространство имён, которое мы используем, не задумываясь — глобальное. Если функция или класс не помещены ни в какой namespace, говорят, что они расположены в глобальном пространстве. Например, в нём должна находиться функция main любой программы. В нём же были все классы и функции, которые вы писали до того, как узнали о namespace. В него попадают все имена из std, если написать using namespace std; в начале файла.
К имени из глобального пространства можно гарантированно получить доступ, написав перед ним два двоеточия ::.
Когда отправляете письмо, вы всегда пишете полный адрес. Например: Россия, Москва, улица Лесная, дом 55. Даже если в вашем городе есть гостиница «‎Россия»‎, почтальону не придёт в голову искать нужный адрес в ней. Но C++ в случае конфликта всегда будет выбирать наиболее близкое при поиске имя, предпочитая его глобальному. Рассмотрим пример:
#include <iostream>
using namespace std;
class Street;
namespace neverhood { // Пространство имён "Небывальщина"
Street& MoonStreet();
}
namespace highland {   // Пространство имён "Плоскогорье"
namespace neverhood {} // Пространство имён "Небывальщина"
Street& GoToNeverhood() {
    return neverhood::MoonStreet();
}
}  // namespace highland
Такая программа не скомпилируется, потому что имя highland::neverhood закроет глобальное имя neverhood при поиске в функции GoToNeverhood. Получить доступ к правильному neverhood можно, явно указав, что имя глобальное: ::neverhood::MoonStreet(). Это равносильно написанию полного адреса на конверте.
Посмотрите на пример:
#include <string>
using namespace std;
template <typename T>
string Bark(T barker);
namespace pet {
class Dog {
public:
    class Barker {};
};

class Kitty {
public:
    class Meower {};
};
}  // namespace pet

using pet::Kitty;

int main() {
    Bark(::pet::Dog::Barker());
    Bark(::pet::Kitty::Meower());
}
Практические рекомендации
Это последний урок темы о пространствах имён. Как часто бывает в программировании, понять синтаксис — только начало пути. Сложнее всего научиться правильно применять пространства имён. Чувствовать, где они уместны, а где нет. Как лучше их называть, как не переборщить с ними. Где пространства имён улучшат программу и помогут избежать ошибок, а где, наоборот, затрудняет её восприятие.
В совершенстве выработать такую интуицию можно только с опытом. Но есть несколько рекомендаций.
Использовать пространства имён желательно:
Если разрабатываете большую программу. В ней точно много имён и весьма вероятны конфликты.
Если разрабатываете библиотеку. Неизвестно, в какой программе она будет использоваться и какие имена будут в этой программе.
Если в вашей программе возникают классы с префиксом или постфиксом. Например: AnimalFunnyPet, AnimalNastyRat, AnimalLucidLynx, AnimalNattyNarwhal. В этом случае имеет смысл заключить классы в namespace animal и убрать префикс Animal у имён классов. По квалифицированному имени animal::FunnyPet сразу ясно, что animal — это префикс. Имя AnimalFunnyPet не так однозначно. Что здесь префикс: Animal или AnimalFunny? Или его нет вообще? Также внутри пространства имён имена классов станут короче.
В одно пространство имен следует объединять общие по смыслу классы и функции. Не стоит определять несколько пространств имен в одном файле, поскольку namespace —  по смыслу более крупное подразделение, чем файл. При этом несколько файлов могут составлять одно пространство имён.
Будьте осторожны при использовании директивы using namespace: она может уничтожить все преимущества, которые дают пространства имён. Поэтому следует выбирать как можно более узкую область действия этой директивы. В h-файле неограниченный using namespace недопустим.

